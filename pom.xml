<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	Copyright (c) 2015 Erik Torres
	 
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<groupId>com.github.etorres.codexposed</groupId>
	<artifactId>codexposed</artifactId>
	<version>1.0.0</version>
	<packaging>pom</packaging>
	
	<name>codexposed</name>
	<description>Source code of my personal blog: An attempt to unveil the secrets of the awesome source code</description>
	<url>http://codexposed.blogspot.com/</url>
	
	<inceptionYear>2015</inceptionYear>

	<licenses>
		<license>
			<name>Apache License, Version 2.0 (ALv2)</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0</url>
			<distribution>repo</distribution>
		</license>
	</licenses>
	
	<scm>
		<url>https://github.com/etorres/codexposed</url>
		<connection>scm:git:git://github.com/etorres/codexposed.git</connection>
		<developerConnection>scm:git:git@github.com/etorres/codexposed.git</developerConnection>
	</scm>
	
	<developers>
		<developer>
			<email>etserrano@gmail.com</email>
			<name>Erik Torres</name>
			<url>https://github.com/etorres</url>
			<id>etorres</id>
		</developer>		
	</developers>
	
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		
		<java.version>1.7</java.version>
		<codexposed.version>${project.version}</codexposed.version>
		
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		
		<!-- Convenience properties to set Maven plugins versions -->
		<buildnumber-maven-plugin.version>1.3</buildnumber-maven-plugin.version>
		<embedmongo-maven-plugin.version>0.1.12</embedmongo-maven-plugin.version>
		<embedmongo-maven-plugin.mongodb.version>3.0.2</embedmongo-maven-plugin.mongodb.version>
		<exec-maven-plugin.version>1.4.0</exec-maven-plugin.version>
		<m2e.lifecycle-mapping.version>1.0.0</m2e.lifecycle-mapping.version>					
		<maven-assembly-plugin.version>2.5.3</maven-assembly-plugin.version>
		<maven-compiler-plugin.version>3.2</maven-compiler-plugin.version>
		<maven-enforcer-plugin.version>1.3.1</maven-enforcer-plugin.version>
		<maven-jar-plugin.version>2.6</maven-jar-plugin.version>		
		<maven-failsafe-plugin.version>2.18.1</maven-failsafe-plugin.version>
		<maven-surefire-plugin.version>2.18.1</maven-surefire-plugin.version>		
		
		<!-- Convenience properties to set library versions -->
		<hamcrest.version>1.3</hamcrest.version> <!-- coincides with JUnit dependency -->
		<jackson.version>2.5.2</jackson.version>
		<junit.version>4.12</junit.version>		
		<log4j.version>2.15.0</log4j.version>		
		<logback.version>1.1.3</logback.version>		
		<mockito.version>1.10.19</mockito.version>
		<slf4j.version>1.7.12</slf4j.version>
	</properties>
	
	<dependencyManagement>
		<dependencies>
			<!-- Apache Commons: Collection of open source reusable Java components -->
			
			<dependency> <!-- I/O routines -->
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>2.7</version>
			</dependency>
			
			<dependency> <!-- Utility classes for the classes that are considered to be Java standards -->
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>3.3.2</version>
			</dependency>
			
			<!-- Guava: Google Core Libraries for Java -->

			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>18.0</version>
			</dependency>

			<!-- JSR305 Annotations from Findbugs -->

			<dependency>
				<groupId>com.google.code.findbugs</groupId>
				<artifactId>jsr305</artifactId>
				<version>3.0.0</version>
			</dependency>
			
			<!-- Jackson Java JSON library -->
			
			<dependency>
  				<groupId>com.fasterxml.jackson.core</groupId>
  				<artifactId>jackson-databind</artifactId>
  				<version>[2.9.10.7,)</version>
			</dependency>
			
			<!-- Log4j logging framework -->
			
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-api</artifactId>
				<version>${log4j.version}</version>
			</dependency>
			
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-core</artifactId>
				<version>${log4j.version}</version>
			</dependency>
			
			<dependency> <!-- SLF4J bridge -->
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-slf4j-impl</artifactId>
				<version>${log4j.version}</version>
			</dependency>
			
			<!-- Logback -->

			<dependency> <!-- classic module (uses the SLF4J API) -->
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
				<version>${logback.version}</version>
			</dependency>			

			<dependency> <!-- SLF4J java.util.logging (jul) bridge -->
				<groupId>org.slf4j</groupId>
				<artifactId>jul-to-slf4j</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			
			<!-- MongoDB Java Driver -->
			
			<dependency>
				<groupId>org.mongodb</groupId>
				<artifactId>mongodb-driver</artifactId>
				<version>3.0.0</version>
			</dependency>
		</dependencies>
	</dependencyManagement>
	
	<dependencies>
		<!-- JUnit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		
		<!-- Hamcrest library of matcher implementations that extends the core matcher
		  transitively included with JUnit -->
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-library</artifactId>
			<version>${hamcrest.version}</version>
			<scope>test</scope>
        </dependency>
        
        <!-- Mockito: a mock objects library for Java -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>${mockito.version}</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.hamcrest</groupId>
					<artifactId>hamcrest-core</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>
	
	<build>
		<pluginManagement>
			<plugins>
				<!-- Handle Maven plugin lifecycle in Eclipse -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>${m2e.lifecycle-mapping.version}</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>exec-maven-plugin</artifactId>										
										<versionRange>[${exec-maven-plugin.version},)</versionRange>
										<goals>
											<goal>exec</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
				
				<!-- Force derived modules to use a specific version of Java -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>${maven-enforcer-plugin.version}</version>
					<executions>
						<execution>
							<id>enforce-versions</id>
							<goals>
								<goal>enforce</goal>
							</goals>
							<configuration>
								<rules>
									<requireJavaVersion>
										<version>${java.version}</version>
									</requireJavaVersion>
								</rules>
							</configuration>
						</execution>
					</executions>
				</plugin>
				
				<!-- Compilation configuration -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>
					<configuration>
						<source>${maven.compiler.source}</source>
						<target>${maven.compiler.target}</target>
					</configuration>
				</plugin>
				
				<!-- Unit tests configuration -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven-surefire-plugin.version}</version>
					<configuration>
						<argLine>-Xmx1024M -Xss1024k -XX:+UseConcMarkSweepGC</argLine>
						<includes>
							<include>**/AllUnitTests.java</include> <!-- unit tests are organized in a JUnit test suite -->
						</includes>
					</configuration>
				</plugin>
				
				<!-- Integration tests configuration -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>${maven-failsafe-plugin.version}</version>
					<configuration>
						<argLine>-Xmx1024M -Xss1024k -XX:+UseConcMarkSweepGC</argLine>
						<includes>
							<include>**/AllIntegrationTests.java</include> <!-- integration tests are organized in a JUnit test suite -->
						</includes>
					</configuration>
					<executions>
						<execution>
							<id>integration-test</id>
							<goals>
								<goal>integration-test</goal>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin> <!-- MongoDB database -->
					<groupId>com.github.joelittlejohn.embedmongo</groupId>
					<artifactId>embedmongo-maven-plugin</artifactId>
					<version>${embedmongo-maven-plugin.version}</version>
				</plugin>
				
				<!-- Package configuration: place a build time-stamp in jar or war manifest -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>${maven-jar-plugin.version}</version>
					<configuration>
						<archive>
							<manifest>
								<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							</manifest>
							<manifestEntries>
								<Implementation-Build>${buildNumber}</Implementation-Build>
							</manifestEntries>
						</archive>
					</configuration>
				</plugin>				
			</plugins>			
		</pluginManagement>
		
		<plugins>
			<!-- Create time-stamp to be used with the manifest -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<version>${buildnumber-maven-plugin.version}</version>
				<configuration>
					<format>{0,date,yyyy-MM-dd HH:mm:ss}</format>
					<items>
						<item>timestamp</item>
					</items>
					<revisionOnScmFailure>unknown</revisionOnScmFailure>
				</configuration>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>create</goal>
						</goals>
					</execution>
				</executions>
			</plugin>			
		</plugins>
	</build>	
	<modules>
		<module>codexposed-input-validation</module>
		<module>codexposed-mongodb-fieldnames</module>
	</modules>
</project>
